/home/chouteau/src/github/alire/ada_spark_workflow/tests/alire/cache/dependencies/aunit_22.0.0_cbd7a80a/include/aunit/reporters/aunit-reporter-xml.adb:
0% of 96 lines covered
0% statement coverage (0 out of 96)

Coverage level: stmt
   1 .: ------------------------------------------------------------------------------
   2 .: --                                                                          --
   3 .: --                         GNAT COMPILER COMPONENTS                         --
   4 .: --                                                                          --
   5 .: --                   A U N I T . R E P O R T E R . X M L                    --
   6 .: --                                                                          --
   7 .: --                                 B o d y                                  --
   8 .: --                                                                          --
   9 .: --                                                                          --
  10 .: --                       Copyright (C) 2000-2019, AdaCore                   --
  11 .: --                                                                          --
  12 .: -- GNAT is free software;  you can  redistribute it  and/or modify it under --
  13 .: -- terms of the  GNU General Public License as published  by the Free Soft- --
  14 .: -- ware  Foundation;  either version 3,  or (at your option) any later ver- --
  15 .: -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
  16 .: -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
  17 .: -- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
  18 .: --                                                                          --
  19 .: -- As a special exception under Section 7 of GPL version 3, you are granted --
  20 .: -- additional permissions described in the GCC Runtime Library Exception,   --
  21 .: -- version 3.1, as published by the Free Software Foundation.               --
  22 .: --                                                                          --
  23 .: -- You should have received a copy of the GNU General Public License and    --
  24 .: -- a copy of the GCC Runtime Library Exception along with this program;     --
  25 .: -- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
  26 .: -- <http://www.gnu.org/licenses/>.                                          --
  27 .: --                                                                          --
  28 .: -- GNAT is maintained by AdaCore (http://www.adacore.com)                   --
  29 .: --                                                                          --
  30 .: ------------------------------------------------------------------------------
  31 .: 
  32 .: with Ada_Containers;     use Ada_Containers;
  33 .: with AUnit.IO;           use AUnit.IO;
  34 .: with AUnit.Time_Measure; use AUnit.Time_Measure;
  35 .: 
  36 .: --  Very simple reporter to console
  37 .: package body AUnit.Reporter.XML is
  38 .: 
  39 .:    procedure Dump_Result_List (File : File_Type; L : Result_Lists.List);
  40 .:    --  List failed assertions
  41 .: 
  42 -:    procedure Put_Measure is new Gen_Put_Measure;
  43 .:    --  Output elapsed time
  44 .: 
  45 .:    procedure Report_Test (File : File_Type; Test : Test_Result);
  46 .:    --  Report a single assertion failure or unexpected exception
  47 .: 
  48 .:    ----------------------
  49 .:    -- Dump_Result_List --
  50 .:    ----------------------
  51 .: 
  52 .:    procedure Dump_Result_List (File : File_Type; L : Result_Lists.List) is
  53 .: 
  54 .:       use Result_Lists;
  55 .: 
  56 -:       C : Cursor := First (L);
  57 .: 
  58 .:    begin
  59 .: 
  60 .:       --  Note: can't use Iterate because it violates restriction
  61 .:       --  No_Implicit_Dynamic_Code
  62 .: 
  63 -:       while Has_Element (C) loop
  64 -:          Report_Test (File, Element (C));
  65 -:          Next (C);
  66 .:       end loop;
  67 .:    end Dump_Result_List;
  68 .: 
  69 .:    ------------
  70 .:    -- Report --
  71 .:    ------------
  72 .: 
  73 .:    procedure Report (Engine  : XML_Reporter;
  74 .:                      R       : in out Result'Class;
  75 .:                      Options : AUnit_Options := Default_Options)
  76 .:    is
  77 -:       T    : AUnit_Duration;
  78 -:       File : File_Type renames Engine.File.all;
  79 .: 
  80 .:    begin
  81 -:       Put_Line (File, "<?xml version='1.0' encoding='utf-8' ?>");
  82 -:       Put      (File, "<TestRun");
  83 .: 
  84 -:       if Elapsed  (R) /= Time_Measure.Null_Time then
  85 -:          T := Get_Measure (Elapsed (R));
  86 .: 
  87 -:          Put (File, " elapsed=""");
  88 -:          Put_Measure (File, T);
  89 -:          Put_Line (File, """>");
  90 .:       else
  91 -:          Put_Line (File, ">");
  92 .:       end if;
  93 .: 
  94 -:       Put_Line (File, "  <Statistics>");
  95 -:       Put      (File, "    <Tests>");
  96 -:       Put (File, Integer (Test_Count (R)), 0);
  97 -:       Put_Line (File, "</Tests>");
  98 -:       Put      (File, "    <FailuresTotal>");
  99 -:       Put (File, Integer (Failure_Count (R) + Error_Count (R)), 0);
 100 -:       Put_Line (File, "</FailuresTotal>");
 101 -:       Put      (File, "    <Failures>");
 102 -:       Put (File, Integer (Failure_Count (R)), 0);
 103 -:       Put_Line (File, "</Failures>");
 104 -:       Put      (File, "    <Errors>");
 105 -:       Put (File, Integer (Error_Count (R)), 0);
 106 -:       Put_Line (File, "</Errors>");
 107 -:       Put_Line (File, "  </Statistics>");
 108 .: 
 109 .:       declare
 110 -:          S : Result_Lists.List;
 111 .:       begin
 112 -:          Put_Line (File, "  <SuccessfulTests>");
 113 -:          if Options.Report_Successes then
 114 -:             Successes (R, S);
 115 -:             Dump_Result_List (File, S);
 116 .:          end if;
 117 -:          Put_Line (File, "  </SuccessfulTests>");
 118 .:       end;
 119 .: 
 120 -:       Put_Line (File, "  <FailedTests>");
 121 .:       declare
 122 -:          F : Result_Lists.List;
 123 .:       begin
 124 -:          Failures (R, F);
 125 -:          Dump_Result_List (File, F);
 126 .:       end;
 127 .: 
 128 .:       declare
 129 -:          E : Result_Lists.List;
 130 .:       begin
 131 -:          Errors (R, E);
 132 -:          Dump_Result_List (File, E);
 133 .:       end;
 134 -:       Put_Line (File, "  </FailedTests>");
 135 .: 
 136 -:       Put_Line (File, "</TestRun>");
 137 .:    end Report;
 138 .: 
 139 .:    ------------------
 140 .:    -- Report_Error --
 141 .:    ------------------
 142 .: 
 143 .:    procedure Report_Test (File : File_Type; Test : Test_Result) is
 144 -:       Is_Assert : Boolean;
 145 -:       T : AUnit_Duration;
 146 .:    begin
 147 -:       Put (File, "    <Test");
 148 .: 
 149 -:       if Test.Elapsed /= Time_Measure.Null_Time then
 150 -:          T := Get_Measure (Test.Elapsed);
 151 .: 
 152 -:          Put (File, " elapsed=""");
 153 -:          Put_Measure (File, T);
 154 -:          Put_Line (File, """>");
 155 .:       else
 156 -:          Put_Line (File, ">");
 157 .:       end if;
 158 .: 
 159 -:       Put      (File, "      <Name>");
 160 -:       Put      (File, Test.Test_Name.all);
 161 .: 
 162 -:       if Test.Routine_Name /= null then
 163 -:          Put (File, " : ");
 164 -:          Put (File, Test.Routine_Name.all);
 165 .:       end if;
 166 .: 
 167 -:       Put_Line (File, "</Name>");
 168 .: 
 169 -:       if Test.Failure /= null or else Test.Error /= null then
 170 -:          if Test.Failure /= null then
 171 -:             Is_Assert := True;
 172 .:          else
 173 -:             Is_Assert := False;
 174 .:          end if;
 175 .: 
 176 -:          Put      (File, "      <FailureType>");
 177 .: 
 178 -:          if Is_Assert then
 179 -:             Put   (File, "Assertion");
 180 .:          else
 181 -:             Put   (File, "Error");
 182 .:          end if;
 183 .: 
 184 -:          Put_Line (File, "</FailureType>");
 185 -:          Put      (File, "      <Message>");
 186 -:          if Is_Assert then
 187 -:             Put   (File, Test.Failure.Message.all);
 188 .:          else
 189 -:             Put   (File, Test.Error.Exception_Name.all);
 190 .:          end if;
 191 -:          Put_Line (File, "</Message>");
 192 .: 
 193 -:          if Is_Assert then
 194 -:             Put_Line (File, "      <Location>");
 195 -:             Put      (File, "        <File>");
 196 -:             Put      (File, Test.Failure.Source_Name.all);
 197 -:             Put_Line (File, "</File>");
 198 -:             Put      (File, "        <Line>");
 199 -:             Put      (File, Integer (Test.Failure.Line), 0);
 200 -:             Put_Line (File, "</Line>");
 201 -:             Put_Line (File, "      </Location>");
 202 .: 
 203 .:          else
 204 -:             Put_Line (File, "      <Exception>");
 205 -:             Put      (File, "      <Message>");
 206 -:             Put      (File, Test.Error.Exception_Name.all);
 207 -:             Put_Line (File, "</Message>");
 208 .: 
 209 -:             if Test.Error.Exception_Message /= null then
 210 -:                Put      (File, "      <Information>");
 211 -:                Put      (File, Test.Error.Exception_Message.all);
 212 -:                Put_Line (File, "</Information>");
 213 .:             end if;
 214 .: 
 215 -:             if Test.Error.Traceback /= null then
 216 -:                Put      (File, "      <Traceback>");
 217 -:                Put      (File, Test.Error.Traceback.all);
 218 -:                Put_Line (File, "</Traceback>");
 219 .:             end if;
 220 .: 
 221 -:             Put_Line (File, "      </Exception>");
 222 .:          end if;
 223 .:       end if;
 224 .: 
 225 -:       Put_Line (File, "    </Test>");
 226 .:    end Report_Test;
 227 .: 
 228 .: end AUnit.Reporter.XML;
