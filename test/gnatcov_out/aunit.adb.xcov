/home/chouteau/src/github/alire/ada_spark_workflow/tests/alire/cache/dependencies/aunit_22.0.0_cbd7a80a/include/aunit/framework/aunit.adb:
0% of 34 lines covered
0% statement coverage (0 out of 34)

Coverage level: stmt
   1 .: ------------------------------------------------------------------------------
   2 .: --                                                                          --
   3 .: --                         GNAT COMPILER COMPONENTS                         --
   4 .: --                                                                          --
   5 .: --                                A U N I T                                 --
   6 .: --                                                                          --
   7 .: --                                 B o d y                                  --
   8 .: --                                                                          --
   9 .: --                                                                          --
  10 .: --                       Copyright (C) 2008-2018, AdaCore                   --
  11 .: --                                                                          --
  12 .: -- GNAT is free software;  you can  redistribute it  and/or modify it under --
  13 .: -- terms of the  GNU General Public License as published  by the Free Soft- --
  14 .: -- ware  Foundation;  either version 3,  or (at your option) any later ver- --
  15 .: -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
  16 .: -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
  17 .: -- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
  18 .: --                                                                          --
  19 .: -- As a special exception under Section 7 of GPL version 3, you are granted --
  20 .: -- additional permissions described in the GCC Runtime Library Exception,   --
  21 .: -- version 3.1, as published by the Free Software Foundation.               --
  22 .: --                                                                          --
  23 .: -- You should have received a copy of the GNU General Public License and    --
  24 .: -- a copy of the GCC Runtime Library Exception along with this program;     --
  25 .: -- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
  26 .: -- <http://www.gnu.org/licenses/>.                                          --
  27 .: --                                                                          --
  28 .: -- GNAT is maintained by AdaCore (http://www.adacore.com)                   --
  29 .: --                                                                          --
  30 .: ------------------------------------------------------------------------------
  31 .: 
  32 .: with Ada.Unchecked_Conversion;
  33 .: with System.Storage_Elements;  use System.Storage_Elements;
  34 .: with AUnit.Memory;             use AUnit.Memory;
  35 .: with System;
  36 .: 
  37 .: package body AUnit is
  38 .: 
  39 .:    --  The allocation strategy below is based on a low-level trick that mimics
  40 .:    --  what GNAT would generate for a regular allocator. Therefore it needs to
  41 .:    --  be protected from changes of Default_Scalar_Storage_Order setting.
  42 .: 
  43 .:    pragma Warnings (Off, "scalar storage order");
  44 .: 
  45 -:    type Bounds is record
  46 -:       First : Natural;
  47 -:       Last  : Natural;
  48 -:    end record
  49 -:    with Bit_Order => System.Default_Bit_Order,
  50 -:         Scalar_Storage_Order => System.Default_Bit_Order;
  51 .: 
  52 -:    type Bounds_Access is access all Bounds;
  53 .: 
  54 -:    type Fat_Pointer is record
  55 -:       Address       : System.Address;
  56 -:       Bound_Address : Bounds_Access;
  57 -:    end record
  58 -:    with Bit_Order => System.Default_Bit_Order,
  59 -:         Scalar_Storage_Order => System.Default_Bit_Order;
  60 .: 
  61 .:    pragma Warnings (On, "scalar storage order");
  62 .: 
  63 .:    -------------------
  64 .:    -- Message_Alloc --
  65 .:    -------------------
  66 .: 
  67 .:    function Message_Alloc (Length : Natural) return Message_String is
  68 -:       function To_Message is new Ada.Unchecked_Conversion
  69 -:         (Fat_Pointer, Message_String);
  70 -:       function To_Bounds_Access is new Ada.Unchecked_Conversion
  71 -:         (System.Address, Bounds_Access);
  72 -:       function To_Address is new Ada.Unchecked_Conversion
  73 -:         (Bounds_Access, System.Address);
  74 -:       Ret : Fat_Pointer;
  75 .:    begin
  76 -:       Ret.Bound_Address := To_Bounds_Access
  77 -:         (AUnit.Memory.AUnit_Alloc
  78 -:            (size_t (Length + (Bounds'Object_Size / 8))));
  79 -:       Ret.Bound_Address.First := 1;
  80 -:       Ret.Bound_Address.Last := Length;
  81 -:       Ret.Address := To_Address (Ret.Bound_Address) + (Bounds'Size / 8);
  82 -:       return To_Message (Ret);
  83 .:    end Message_Alloc;
  84 .: 
  85 .:    ------------------
  86 .:    -- Message_Free --
  87 .:    ------------------
  88 .: 
  89 .:    procedure Message_Free (Msg : in out Message_String) is
  90 .:    begin
  91 -:       if Msg /= null then
  92 -:          AUnit.Memory.AUnit_Free (Msg.all'Address);
  93 -:          Msg := null;
  94 .:       end if;
  95 .:    end Message_Free;
  96 .: 
  97 .:    ------------
  98 .:    -- Format --
  99 .:    ------------
 100 .: 
 101 .:    function Format (S : String) return Message_String is
 102 -:       Ptr : constant Message_String := Message_Alloc (S'Length);
 103 .:    begin
 104 -:       for J in S'Range loop
 105 -:          Ptr (J - S'First + 1) := S (J);
 106 .:       end loop;
 107 .: 
 108 -:       return Ptr;
 109 .:    end Format;
 110 .: 
 111 .: end AUnit;
