/home/chouteau/src/github/alire/ada_spark_workflow/tests/alire/cache/dependencies/aunit_22.0.0_cbd7a80a/include/aunit/reporters/aunit-reporter-gnattest.adb:
0% of 102 lines covered
0% statement coverage (0 out of 102)

Coverage level: stmt
   1 .: ------------------------------------------------------------------------------
   2 .: --                                                                          --
   3 .: --                         GNAT COMPILER COMPONENTS                         --
   4 .: --                                                                          --
   5 .: --              A U N I T . R E P O R T E R . G N A T T E S T               --
   6 .: --                                                                          --
   7 .: --                                 B o d y                                  --
   8 .: --                                                                          --
   9 .: --                                                                          --
  10 .: --                       Copyright (C) 2012-2019, AdaCore                   --
  11 .: --                                                                          --
  12 .: -- GNAT is free software;  you can  redistribute it  and/or modify it under --
  13 .: -- terms of the  GNU General Public License as published  by the Free Soft- --
  14 .: -- ware  Foundation;  either version 3,  or (at your option) any later ver- --
  15 .: -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
  16 .: -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
  17 .: -- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
  18 .: --                                                                          --
  19 .: -- As a special exception under Section 7 of GPL version 3, you are granted --
  20 .: -- additional permissions described in the GCC Runtime Library Exception,   --
  21 .: -- version 3.1, as published by the Free Software Foundation.               --
  22 .: --                                                                          --
  23 .: -- You should have received a copy of the GNU General Public License and    --
  24 .: -- a copy of the GCC Runtime Library Exception along with this program;     --
  25 .: -- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
  26 .: -- <http://www.gnu.org/licenses/>.                                          --
  27 .: --                                                                          --
  28 .: -- GNAT is maintained by AdaCore (http://www.adacore.com)                   --
  29 .: --                                                                          --
  30 .: ------------------------------------------------------------------------------
  31 .: 
  32 .: with AUnit.IO;           use AUnit.IO;
  33 .: with AUnit.Time_Measure; use AUnit.Time_Measure;
  34 .: 
  35 .: --  Reporter intended to be used by test drivers generated by gnattest.
  36 .: 
  37 .: package body  AUnit.Reporter.GNATtest is
  38 .: 
  39 .:    procedure Dump_Result_List (File : File_Type; L : Result_Lists.List);
  40 .:    --  List failed assertions
  41 .: 
  42 .:    procedure Report_Test (File : File_Type; Test : Test_Result);
  43 .:    --  Report a single assertion failure or unexpected exception
  44 .: 
  45 -:    procedure Put_Measure is new Gen_Put_Measure_In_Seconds;
  46 .:    --  Output elapsed time
  47 .: 
  48 .:    procedure Indent (File : File_Type; N : Natural);
  49 .:    --  Print N indentations to output
  50 .: 
  51 .:    ------------------------
  52 .:    --  Dump_Result_List  --
  53 .:    ------------------------
  54 .: 
  55 .:    procedure Dump_Result_List (File : File_Type; L : Result_Lists.List) is
  56 .: 
  57 .:       use Result_Lists;
  58 .: 
  59 -:       C : Cursor := First (L);
  60 .: 
  61 .:    begin
  62 .: 
  63 .:       --  Note: can't use Iterate because it violates restriction
  64 .:       --  No_Implicit_Dynamic_Code
  65 .: 
  66 -:       while Has_Element (C) loop
  67 -:          Report_Test (File, Element (C));
  68 -:          Next (C);
  69 .:       end loop;
  70 .:    end Dump_Result_List;
  71 .: 
  72 .:    ------------
  73 .:    -- Indent --
  74 .:    ------------
  75 .: 
  76 .:    procedure Indent (File : File_Type; N : Natural) is
  77 .:    begin
  78 -:       for J in 1 .. N loop
  79 -:          Put (File, "    ");
  80 .:       end loop;
  81 .:    end Indent;
  82 .: 
  83 .:    ------------
  84 .:    -- Report --
  85 .:    ------------
  86 .: 
  87 .:    procedure Report (Engine  : GNATtest_Reporter;
  88 .:                      R       : in out Result'Class;
  89 .:                      Options : AUnit_Options := Default_Options)
  90 .:    is
  91 -:       File : File_Type renames Engine.File.all;
  92 .: 
  93 -:       Failures_Count : Integer;
  94 -:       Crashes_Count  : Integer;
  95 -:       Passed_Count   : Integer;
  96 -:       Tests_Count    : Integer;
  97 .:    begin
  98 .: 
  99 -:       Tests_Count := Integer (Test_Count (R));
 100 -:       Crashes_Count := Integer (Error_Count (R));
 101 -:       Passed_Count := Integer (Success_Count (R));
 102 -:       Failures_Count := Tests_Count - (Passed_Count + Crashes_Count);
 103 .: 
 104 -:       if Options.Report_Successes then
 105 .:          declare
 106 -:             S : Result_Lists.List;
 107 .:          begin
 108 -:             Successes (R, S);
 109 -:             Dump_Result_List (File, S);
 110 .:          end;
 111 .:       end if;
 112 .: 
 113 .:       declare
 114 -:          F : Result_Lists.List;
 115 .:       begin
 116 -:          Failures (R, F);
 117 -:          Dump_Result_List (File, F);
 118 .:       end;
 119 .: 
 120 .:       declare
 121 -:          E : Result_Lists.List;
 122 .:       begin
 123 -:          Errors (R, E);
 124 -:          Dump_Result_List (File, E);
 125 .:       end;
 126 .: 
 127 -:       Put      (File, Tests_Count, 0);
 128 -:       Put      (File, " tests run: ");
 129 -:       Put      (File, Passed_Count, 0);
 130 -:       Put      (File, " passed; ");
 131 -:       Put      (File, Failures_Count, 0);
 132 -:       Put      (File, " failed; ");
 133 -:       Put      (File, Crashes_Count, 0);
 134 -:       Put_Line (File, " crashed.");
 135 .: 
 136 .:    end Report;
 137 .: 
 138 .:    ------------------
 139 .:    -- Report_Test --
 140 .:    ------------------
 141 .: 
 142 .:    procedure Report_Test (File : File_Type; Test : Test_Result) is
 143 -:       Is_Assert : Boolean;
 144 -:       Is_Condition : Boolean := False;
 145 .: 
 146 -:       T : AUnit_Duration;
 147 -:       N : Integer;
 148 .:    begin
 149 .: 
 150 -:       Put      (File, Test.Test_Name.all);
 151 .: 
 152 -:       if Test.Failure /= null or else Test.Error /= null then
 153 -:          if Test.Failure /= null then
 154 -:             Is_Assert := True;
 155 .:          else
 156 -:             Is_Assert := False;
 157 .:          end if;
 158 .: 
 159 -:          if Is_Assert then
 160 -:             Put   (File, " error: corresponding test FAILED: ");
 161 .:          else
 162 -:             Put   (File, " error: corresponding test CRASHED: ");
 163 .:          end if;
 164 .: 
 165 -:          if Is_Assert then
 166 .: 
 167 -:             if Test.Failure.Message'Length > 9 then
 168 -:                N := Test.Failure.Message'First;
 169 -:                if
 170 -:                  Test.Failure.Message.all (N .. N + 8) = "req_sloc("
 171 -:                  or else Test.Failure.Message.all (N .. N + 8) = "ens_sloc("
 172 .:                then
 173 -:                   for I in N + 9 .. Test.Failure.Message'Last - 2 loop
 174 -:                      if Test.Failure.Message.all (I + 1 .. I + 2) = "):" then
 175 -:                         Put (File, Test.Failure.Message.all
 176 -:                                (I + 3 .. Test.Failure.Message'Last));
 177 .: 
 178 -:                         Put      (File, " (");
 179 -:                         Put      (File, Test.Failure.Message.all (N + 9 .. I));
 180 -:                         Put_Line (File, ")");
 181 -:                         Is_Condition := True;
 182 -:                         exit;
 183 .:                      end if;
 184 .:                   end loop;
 185 .:                end if;
 186 .:             end if;
 187 .: 
 188 -:             if not Is_Condition then
 189 -:                Put      (File, Test.Failure.Message.all);
 190 -:                Put      (File, " (");
 191 -:                Put      (File, Test.Failure.Source_Name.all);
 192 -:                Put      (File, ":");
 193 -:                Put      (File, Integer (Test.Failure.Line), 0);
 194 -:                Put      (File, ")");
 195 .:             end if;
 196 -:             if Test.Elapsed /= Time_Measure.Null_Time then
 197 -:                Put (File, " (");
 198 -:                T := Get_Measure (Test.Elapsed);
 199 -:                Put_Measure (File, T);
 200 -:                Put (File, ")");
 201 .:             end if;
 202 -:             New_Line (File);
 203 .: 
 204 .:          else
 205 -:             Put      (File, Test.Error.Exception_Name.all);
 206 .: 
 207 -:             if Test.Error.Exception_Message /= null then
 208 -:                Put      (File, " : ");
 209 -:                Put      (File, Test.Error.Exception_Message.all);
 210 .:             end if;
 211 -:             if Test.Elapsed /= Time_Measure.Null_Time then
 212 -:                Put (File, " (");
 213 -:                T := Get_Measure (Test.Elapsed);
 214 -:                Put_Measure (File, T);
 215 -:                Put (File, ")");
 216 .:             end if;
 217 -:             New_Line (File);
 218 .: 
 219 -:             if Test.Error.Traceback /= null then
 220 -:                Put_Line (File, " Traceback:");
 221 .: 
 222 .:                declare
 223 -:                   From, To : Natural := Test.Error.Traceback'First;
 224 .:                begin
 225 -:                   while From <= Test.Error.Traceback'Last loop
 226 -:                      To := From;
 227 -:                      while To <= Test.Error.Traceback'Last
 228 -:                        and then Test.Error.Traceback (To) /= ASCII.LF
 229 .:                      loop
 230 -:                         To := To + 1;
 231 .:                      end loop;
 232 .: 
 233 -:                      Indent (File, 2);
 234 -:                      Put_Line (File, Test.Error.Traceback (From .. To - 1));
 235 -:                      From := To + 1;
 236 .:                   end loop;
 237 .:                end;
 238 .:             end if;
 239 .: 
 240 .:          end if;
 241 .:       else
 242 -:          Put (File, " info: corresponding test PASSED");
 243 -:          if Test.Elapsed /= Time_Measure.Null_Time then
 244 -:             Put (File, " (");
 245 -:             T := Get_Measure (Test.Elapsed);
 246 -:             Put_Measure (File, T);
 247 -:             Put (File, ")");
 248 .:          end if;
 249 -:          New_Line (File);
 250 .:       end if;
 251 .: 
 252 .:    end Report_Test;
 253 .: end AUnit.Reporter.GNATtest;
