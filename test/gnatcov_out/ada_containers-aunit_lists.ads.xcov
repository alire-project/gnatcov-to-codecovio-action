/home/chouteau/src/github/alire/ada_spark_workflow/tests/alire/cache/dependencies/aunit_22.0.0_cbd7a80a/include/aunit/containers/ada_containers-aunit_lists.ads:
0% of 24 lines covered
0% statement coverage (0 out of 24)

Coverage level: stmt
   1 .: ------------------------------------------------------------------------------
   2 .: --                                                                          --
   3 .: --                         GNAT LIBRARY COMPONENTS                          --
   4 .: --                                                                          --
   5 .: --            A D A _ C O N T A I N E R S . A U N I T _ L I S T S           --
   6 .: --                                                                          --
   7 .: --                                 S p e c                                  --
   8 .: --                                                                          --
   9 .: --          Copyright (C) 2004-2008, Free Software Foundation, Inc.         --
  10 .: --                   Copyright (C) 2008-2011, AdaCore                       --
  11 .: --                                                                          --
  12 .: -- This specification is derived from the Ada Reference Manual for use with --
  13 .: -- GNAT. The copyright notice above, and the license provisions that follow --
  14 .: -- apply solely to the  contents of the part following the private keyword. --
  15 .: --                                                                          --
  16 .: -- GNAT is free software;  you can  redistribute it  and/or modify it under --
  17 .: -- terms of the  GNU General Public License as published  by the Free Soft- --
  18 .: -- ware  Foundation;  either version 3,  or (at your option) any later ver- --
  19 .: -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
  20 .: -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
  21 .: -- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
  22 .: --                                                                          --
  23 .: -- As a special exception under Section 7 of GPL version 3, you are granted --
  24 .: -- additional permissions described in the GCC Runtime Library Exception,   --
  25 .: -- version 3.1, as published by the Free Software Foundation.               --
  26 .: --                                                                          --
  27 .: -- You should have received a copy of the GNU General Public License and    --
  28 .: -- a copy of the GCC Runtime Library Exception along with this program;     --
  29 .: -- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
  30 .: -- <http://www.gnu.org/licenses/>.                                          --
  31 .: --                                                                          --
  32 .: -- This unit was originally developed by Matthew J Heaney.                  --
  33 .: ------------------------------------------------------------------------------
  34 .: 
  35 .: --  This unit is an adaptation of the Ada2005 runtime's
  36 .: --  Ada.Containers.Doubly_Linked_Lists with modifications to make this package
  37 .: --  compatible with the ZFP profiles and also compatible with AUnit's memory
  38 .: --  management.
  39 .: 
  40 .: --  Some Ada2005 constructs have also been removed so that user tests can be
  41 .: --  compiled in Ada95.
  42 .: 
  43 .: generic
  44 .:    type Element_Type is private;
  45 .: 
  46 .:    with function "=" (Left, Right : Element_Type)
  47 .:       return Boolean is <>;
  48 .: 
  49 .: package Ada_Containers.AUnit_Lists is
  50 .: 
  51 -:    type List is tagged limited private;
  52 .: 
  53 -:    type Cursor is private;
  54 .: 
  55 .: --    Empty_List : constant List;
  56 .: 
  57 -:    No_Element : constant Cursor;
  58 .: 
  59 .:    function "=" (Left, Right : List) return Boolean;
  60 .: 
  61 .:    function Length (Container : List) return Count_Type;
  62 .: 
  63 .:    function Is_Empty (Container : List) return Boolean;
  64 .: 
  65 .:    procedure Clear (Container : in out List);
  66 .: 
  67 .:    function Element (Position : Cursor) return Element_Type;
  68 .: 
  69 .:    procedure Replace_Element
  70 .:      (Container : in out List;
  71 .:       Position  : Cursor;
  72 .:       New_Item  : Element_Type);
  73 .: 
  74 .: --     procedure Query_Element
  75 .: --       (Position : Cursor;
  76 .: --        Process  : not null access procedure (Element : Element_Type));
  77 .: 
  78 .: --     procedure Update_Element
  79 .: --       (Container : in out List;
  80 .: --        Position  : Cursor;
  81 .: --      Process   : not null access procedure (Element : in out Element_Type));
  82 .: 
  83 .:    procedure Move
  84 .:      (Target : in out List;
  85 .:       Source : in out List);
  86 .: 
  87 .:    procedure Insert
  88 .:      (Container : in out List;
  89 .:       Before    : Cursor;
  90 .:       New_Item  : Element_Type;
  91 .:       Count     : Count_Type := 1);
  92 .: 
  93 .:    procedure Insert
  94 .:      (Container : in out List;
  95 .:       Before    : Cursor;
  96 .:       New_Item  : Element_Type;
  97 .:       Position  : out Cursor;
  98 .:       Count     : Count_Type := 1);
  99 .: 
 100 .:    procedure Insert
 101 .:      (Container : in out List;
 102 .:       Before    : Cursor;
 103 .:       Position  : out Cursor;
 104 .:       Count     : Count_Type := 1);
 105 .: 
 106 .:    procedure Prepend
 107 .:      (Container : in out List;
 108 .:       New_Item  : Element_Type;
 109 .:       Count     : Count_Type := 1);
 110 .: 
 111 .:    procedure Append
 112 .:      (Container : in out List;
 113 .:       New_Item  : Element_Type;
 114 .:       Count     : Count_Type := 1);
 115 .: 
 116 .:    procedure Delete
 117 .:      (Container : in out List;
 118 .:       Position  : in out Cursor;
 119 .:       Count     : Count_Type := 1);
 120 .: 
 121 .:    procedure Delete_First
 122 .:      (Container : in out List;
 123 .:       Count     : Count_Type := 1);
 124 .: 
 125 .:    procedure Delete_Last
 126 .:      (Container : in out List;
 127 .:       Count     : Count_Type := 1);
 128 .: 
 129 .:    procedure Reverse_Elements (Container : in out List);
 130 .: 
 131 .:    procedure Swap
 132 .:      (Container : in out List;
 133 .:       I, J      : Cursor);
 134 .: 
 135 .:    procedure Swap_Links
 136 .:      (Container : in out List;
 137 .:       I, J      : Cursor);
 138 .: 
 139 .:    procedure Splice
 140 .:      (Target : in out List;
 141 .:       Before : Cursor;
 142 .:       Source : in out List);
 143 .: 
 144 .:    procedure Splice
 145 .:      (Target   : in out List;
 146 .:       Before   : Cursor;
 147 .:       Source   : in out List;
 148 .:       Position : in out Cursor);
 149 .: 
 150 .:    procedure Splice
 151 .:      (Container : in out List;
 152 .:       Before    : Cursor;
 153 .:       Position  : Cursor);
 154 .: 
 155 .:    function First (Container : List) return Cursor;
 156 .: 
 157 .:    function First_Element (Container : List) return Element_Type;
 158 .: 
 159 .:    function Last (Container : List) return Cursor;
 160 .: 
 161 .:    function Last_Element (Container : List) return Element_Type;
 162 .: 
 163 .:    function Next (Position : Cursor) return Cursor;
 164 .: 
 165 .:    procedure Next (Position : in out Cursor);
 166 .: 
 167 .:    function Previous (Position : Cursor) return Cursor;
 168 .: 
 169 .:    procedure Previous (Position : in out Cursor);
 170 .: 
 171 .:    function Find
 172 .:      (Container : List;
 173 .:       Item      : Element_Type;
 174 .:       Position  : Cursor := No_Element) return Cursor;
 175 .: 
 176 .:    function Reverse_Find
 177 .:      (Container : List;
 178 .:       Item      : Element_Type;
 179 .:       Position  : Cursor := No_Element) return Cursor;
 180 .: 
 181 .:    function Contains
 182 .:      (Container : List;
 183 .:       Item      : Element_Type) return Boolean;
 184 .: 
 185 .:    function Has_Element (Position : Cursor) return Boolean;
 186 .: 
 187 -:    type Iterator is access procedure (Position : Cursor);
 188 .: 
 189 .:    procedure Iterate
 190 .:      (Container : List;
 191 .:       Process   : Iterator);
 192 .: 
 193 .: --     procedure Reverse_Iterate
 194 .: --       (Container : List;
 195 .: --        Process   : not null access procedure (Position : Cursor));
 196 .: 
 197 .:    generic
 198 .:       with function "<" (Left, Right : Element_Type) return Boolean is <>;
 199 .:    package Generic_Sorting is
 200 .: 
 201 .:       function Is_Sorted (Container : List) return Boolean;
 202 .: 
 203 .:       procedure Sort (Container : in out List);
 204 .: 
 205 .:       procedure Merge (Target, Source : in out List);
 206 .: 
 207 .:    end Generic_Sorting;
 208 .: 
 209 .: private
 210 .: 
 211 .:    pragma Inline (Next);
 212 .:    pragma Inline (Previous);
 213 .: 
 214 -:    type Node_Type;
 215 -:    type Node_Access is access Node_Type;
 216 .:    pragma No_Strict_Aliasing (Node_Access);
 217 .: 
 218 -:    type Node_Type is limited record
 219 -:       Element : Element_Type;
 220 -:       Next    : Node_Access;
 221 -:       Prev    : Node_Access;
 222 -:    end record;
 223 .: 
 224 -:    type List is tagged limited record
 225 -:       First  : Node_Access := null;
 226 -:       Last   : Node_Access := null;
 227 -:       Length : Count_Type := 0;
 228 -:       Busy   : Natural := 0;
 229 -:       Lock   : Natural := 0;
 230 -:    end record;
 231 .: 
 232 -:    type List_Access is access constant List;
 233 .: 
 234 -:    type Cursor is record
 235 -:       Container : List_Access;
 236 -:       Node      : Node_Access;
 237 -:    end record;
 238 .: 
 239 .:    --  Empty_List : constant List := (Controlled with null, null, 0, 0, 0);
 240 .: 
 241 -:    No_Element : constant Cursor := (null, null);
 242 .: 
 243 .: end Ada_Containers.AUnit_Lists;
