/home/chouteau/src/github/alire/ada_spark_workflow/tests/alire/cache/dependencies/aunit_22.0.0_cbd7a80a/include/aunit/framework/calendar/aunit-time_measure.adb:
0% of 51 lines covered
0% statement coverage (0 out of 51)

Coverage level: stmt
   1 .: ------------------------------------------------------------------------------
   2 .: --                                                                          --
   3 .: --                         GNAT COMPILER COMPONENTS                         --
   4 .: --                                                                          --
   5 .: --                     A U N I T . T I M E _ M E A S U R E                  --
   6 .: --                                                                          --
   7 .: --                                 B o d y                                  --
   8 .: --                                                                          --
   9 .: --                                                                          --
  10 .: --                    Copyright (C) 2006-2019, AdaCore                      --
  11 .: --                                                                          --
  12 .: -- GNAT is free software;  you can  redistribute it  and/or modify it under --
  13 .: -- terms of the  GNU General Public License as published  by the Free Soft- --
  14 .: -- ware  Foundation;  either version 3,  or (at your option) any later ver- --
  15 .: -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
  16 .: -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
  17 .: -- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
  18 .: --                                                                          --
  19 .: -- As a special exception under Section 7 of GPL version 3, you are granted --
  20 .: -- additional permissions described in the GCC Runtime Library Exception,   --
  21 .: -- version 3.1, as published by the Free Software Foundation.               --
  22 .: --                                                                          --
  23 .: -- You should have received a copy of the GNU General Public License and    --
  24 .: -- a copy of the GCC Runtime Library Exception along with this program;     --
  25 .: -- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
  26 .: -- <http://www.gnu.org/licenses/>.                                          --
  27 .: --                                                                          --
  28 .: -- GNAT is maintained by AdaCore (http://www.adacore.com)                   --
  29 .: --                                                                          --
  30 .: ------------------------------------------------------------------------------
  31 .: 
  32 .: with Ada.Strings;       use Ada.Strings;
  33 .: with Ada.Strings.Fixed; use Ada.Strings.Fixed;
  34 .: 
  35 .: package body AUnit.Time_Measure is
  36 .: 
  37 .:    -------------------
  38 .:    -- Start_Measure --
  39 .:    -------------------
  40 .: 
  41 .:    procedure Start_Measure (T : in out Time) is
  42 .:    begin
  43 -:       T.Start := Ada.Calendar.Clock;
  44 .:    end Start_Measure;
  45 .: 
  46 .:    ------------------
  47 .:    -- Stop_Measure --
  48 .:    ------------------
  49 .: 
  50 .:    procedure Stop_Measure (T : in out Time) is
  51 .:    begin
  52 -:       T.Stop := Ada.Calendar.Clock;
  53 .:    end Stop_Measure;
  54 .: 
  55 .:    -----------------
  56 .:    -- Get_Measure --
  57 .:    -----------------
  58 .: 
  59 .:    function Get_Measure (T : Time) return AUnit_Duration is
  60 .:       use type Ada.Calendar.Time;
  61 .:    begin
  62 -:       return AUnit_Duration (T.Stop - T.Start);
  63 .:    end Get_Measure;
  64 .: 
  65 .:    ---------------------
  66 .:    -- Gen_Put_Measure --
  67 .:    ---------------------
  68 .: 
  69 .:    procedure Gen_Put_Measure (File    : AUnit.IO.File_Type;
  70 .:                               Measure : AUnit_Duration) is
  71 -:       H, M, S  : Integer := 0;
  72 -:       T        : Duration := Duration (Measure);
  73 -:       Force    : Boolean;
  74 .: 
  75 .:       procedure Put (N : Integer; Length : Integer);
  76 .:       --  Put N using at least Length digits.
  77 .: 
  78 .:       procedure Put (N : Integer; Length : Integer) is
  79 .:       begin
  80 -:          for Dig in reverse 1 .. Length - 1 loop
  81 -:             if N < 10**Dig then
  82 -:                Put (File, "0");
  83 .:             else
  84 -:                exit;
  85 .:             end if;
  86 .:          end loop;
  87 .: 
  88 -:          Put (File, Trim (N'Img, Left));
  89 .:       end Put;
  90 .: 
  91 .:    begin
  92 .:       --  Calculate the number of hours, minutes and seconds
  93 -:       while T >= 3600.0 loop
  94 -:          H := H + 1;
  95 -:          T := T - 3600.0;
  96 .:       end loop;
  97 .: 
  98 -:       while T >= 60.0 loop
  99 -:          M := M + 1;
 100 -:          T := T - 60.0;
 101 .:       end loop;
 102 .: 
 103 -:       while T >= 1.0 loop
 104 -:          S := S + 1;
 105 -:          T := T - 1.0;
 106 .:       end loop;
 107 .: 
 108 .:       --  Now display the result
 109 -:       Force := False;
 110 .: 
 111 -:       if H > 0 then
 112 -:          Put (File, Trim (H'Img, Left));
 113 -:          Put (File, "h");
 114 -:          Force := True;
 115 .:       end if;
 116 .: 
 117 -:       if M > 0 or else Force then
 118 -:          if not Force then
 119 -:             Put (File, Trim (M'Img, Left));
 120 .:          else
 121 .:             --  In case some output is already done, then we force a 2 digits
 122 .:             --  output so that the output is normalized.
 123 -:             Put (M, 2);
 124 .:          end if;
 125 .: 
 126 -:          Put (File, "min. ");
 127 -:          Force := True;
 128 .:       end if;
 129 .: 
 130 -:       if not Force then
 131 -:          Put (File, Trim (S'Img, Left));
 132 .:       else
 133 -:          Put (S, 2);
 134 .:       end if;
 135 .: 
 136 -:       Put (File, ".");
 137 -:       Put (Integer (T * 1_000_000.0), 6);
 138 -:       Put (File, " sec.");
 139 .:    end Gen_Put_Measure;
 140 .: 
 141 .:    --------------------------------
 142 .:    -- Gen_Put_Measure_In_Seconds --
 143 .:    --------------------------------
 144 .: 
 145 .:    procedure Gen_Put_Measure_In_Seconds (File    : AUnit.IO.File_Type;
 146 .:                                          Measure : AUnit_Duration) is
 147 -:       S  : Integer := 0;
 148 -:       T  : Duration := Duration (Measure);
 149 .: 
 150 .:       procedure Put (N : Integer; Length : Integer);
 151 .:       --  Put N using at least Length digits.
 152 .: 
 153 .:       procedure Put (N : Integer; Length : Integer) is
 154 .:       begin
 155 -:          for Dig in reverse 1 .. Length - 1 loop
 156 -:             if N < 10**Dig then
 157 -:                Put (File, "0");
 158 .:             else
 159 -:                exit;
 160 .:             end if;
 161 .:          end loop;
 162 .: 
 163 -:          Put (File, Trim (N'Img, Left));
 164 .:       end Put;
 165 .: 
 166 .:    begin
 167 .: 
 168 -:       while T >= 1.0 loop
 169 -:          S := S + 1;
 170 -:          T := T - 1.0;
 171 .:       end loop;
 172 .: 
 173 -:       Put (File, Trim (S'Img, Left));
 174 .: 
 175 -:       Put (File, ".");
 176 -:       Put (Integer (T * 1_000_000.0), 9);
 177 -:       Put (File, "s");
 178 .:    end Gen_Put_Measure_In_Seconds;
 179 .: 
 180 .: end AUnit.Time_Measure;
