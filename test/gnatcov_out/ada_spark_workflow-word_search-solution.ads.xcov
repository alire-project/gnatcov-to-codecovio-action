/home/chouteau/src/github/alire/ada_spark_workflow/src/ada_spark_workflow-word_search-solution.ads:
100% of 15 lines covered
100% statement coverage (15 out of 15)

Coverage level: stmt
   1 .: with Ada_SPARK_Workflow.Word_Search.Word;
   2 .: 
   3 .: with Ada.Containers; use Ada.Containers;
   4 .: 
   5 .: private with Ada.Containers.Formal_Vectors;
   6 .: 
   7 .: package Ada_SPARK_Workflow.Word_Search.Solution
   8 .: with SPARK_Mode
   9 .: is
  10 +:    type Instance (Max_Words : Ada.Containers.Count_Type)
  11 +:    is
  12 +:    private;
  13 .: 
  14 .:    function Word_Count (This : Instance) return Ada.Containers.Count_Type;
  15 .: 
  16 .:    procedure Add_Word (This           : in out Instance;
  17 .:                        W              :        Word.Instance;
  18 .:                        XS, YS, XE, YE :        Positive)
  19 .:      with Pre => Word_Count (This) < This.Max_Words;
  20 .: 
  21 .:    procedure Print (This : Instance);
  22 .: 
  23 .: private
  24 .: 
  25 +:    type Word_Placement is record
  26 +:       W              : Word.Instance;
  27 +:       XS, YS, XE, YE : Positive;
  28 +:    end record;
  29 .: 
  30 +:    package Word_Placement_Vector
  31 +:    is new Ada.Containers.Formal_Vectors (Index_Type   => Positive,
  32 +:                                          Element_Type => Word_Placement);
  33 .: 
  34 +:    type Instance (Max_Words : Ada.Containers.Count_Type)
  35 +:    is record
  36 +:       Placements : Word_Placement_Vector.Vector (Max_Words);
  37 +:    end record;
  38 .: 
  39 .:    function Word_Count (This : Instance) return Ada.Containers.Count_Type
  40 +:    is (Word_Placement_Vector.Length (This.Placements));
  41 .: 
  42 .: end Ada_SPARK_Workflow.Word_Search.Solution;
