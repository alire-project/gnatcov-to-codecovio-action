/home/chouteau/src/github/alire/ada_spark_workflow/tests/alire/cache/dependencies/aunit_22.0.0_cbd7a80a/include/aunit/reporters/aunit-reporter-junit.adb:
0% of 74 lines covered
0% statement coverage (0 out of 74)

Coverage level: stmt
   1 .: ------------------------------------------------------------------------------
   2 .: --                                                                          --
   3 .: --                         GNAT COMPILER COMPONENTS                         --
   4 .: --                                                                          --
   5 .: --                   A U N I T . R E P O R T E R . J U N I T                --
   6 .: --                                                                          --
   7 .: --                                 B o d y                                  --
   8 .: --                                                                          --
   9 .: --                                                                          --
  10 .: --                      Copyright (C) 2020, AdaCore                         --
  11 .: --                                                                          --
  12 .: -- GNAT is free software;  you can  redistribute it  and/or modify it under --
  13 .: -- terms of the  GNU General Public License as published  by the Free Soft- --
  14 .: -- ware  Foundation;  either version 3,  or (at your option) any later ver- --
  15 .: -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
  16 .: -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
  17 .: -- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
  18 .: --                                                                          --
  19 .: -- As a special exception under Section 7 of GPL version 3, you are granted --
  20 .: -- additional permissions described in the GCC Runtime Library Exception,   --
  21 .: -- version 3.1, as published by the Free Software Foundation.               --
  22 .: --                                                                          --
  23 .: -- You should have received a copy of the GNU General Public License and    --
  24 .: -- a copy of the GCC Runtime Library Exception along with this program;     --
  25 .: -- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
  26 .: -- <http://www.gnu.org/licenses/>.                                          --
  27 .: --                                                                          --
  28 .: -- GNAT is maintained by AdaCore (http://www.adacore.com)                   --
  29 .: --                                                                          --
  30 .: ------------------------------------------------------------------------------
  31 .: 
  32 .: with AUnit.IO;              use AUnit.IO;
  33 .: with AUnit.Time_Measure;    use AUnit.Time_Measure;
  34 .: 
  35 .: package body AUnit.Reporter.JUnit is
  36 .:    
  37 .:    procedure Put_Special_Chars (File : File_Type; S : String) is
  38 .:    begin
  39 -:       for C of S loop
  40 -:          case C is
  41 -:             when '"' => Put (File, "&quot;");
  42 -:             when '<' => Put (File, "&lt;");
  43 -:             when '>' => Put (File, "&gt;");
  44 -:             when '&' => Put (File, "&amp;");
  45 -:             when others => Put (File, (1 => C));
  46 .:          end case;
  47 .:       end loop;
  48 .:    end Put_Special_Chars;
  49 .:    
  50 -:    procedure Put_Measure is
  51 -:      new Gen_Put_Measure_In_Seconds;
  52 .:    
  53 .:    procedure Report_Test (File : File_Type; Test : Test_Result) is
  54 .:    begin
  55 -:       Put (File, "<testcase name=""");
  56 -:       Put_Special_Chars (File, Test.Test_Name.all &
  57 -:            (if Test.Routine_Name = null then ""
  58 -:               else " : " & Test.Routine_Name.all));
  59 -:       Put (File, """ time=""");
  60 -:       Put_Measure (File, Get_Measure (Test.Elapsed));
  61 -:       if Test.Failure /= null then
  62 -:          Put_Line (File, """>"); 
  63 -:          Put_Line (File, "<failure>");
  64 -:          Put_Line (File, "<![CDATA[");
  65 -:          Put (File, "        Assertion: ");
  66 -:          Put_Line (File, Test.Failure.Message.all);
  67 -:          Put (File, "        File: ");
  68 -:          Put_Line (File, Test.Failure.Source_Name.all);
  69 -:          Put (File, "        Line: ");
  70 -:          Put (File, Integer (Test.Failure.Line), 0);
  71 -:          New_Line (File);
  72 -:          Put_Line (File, "]]>");
  73 -:          Put_Line (File, "</failure>");
  74 -:          Put_Line (File, "</testcase>");
  75 -:       elsif Test.Error /= null then
  76 -:          Put_Line (File, """>"); 
  77 -:          Put_Line (File, "<error>");
  78 -:          Put_Line (File, "<![CDATA[");
  79 -:          Put (File, "      Exception: ");
  80 -:          Put_Line (File, Test.Error.Exception_Name.all);
  81 -:          if Test.Error.Exception_Message /= null then
  82 -:             Put_Line (File, Test.Error.Exception_Message.all);
  83 .:          end if;
  84 -:          if Test.Error.Traceback /= null then
  85 -:             Put      (File, "      Traceback: ");
  86 -:             Put_Line (File, Test.Error.Traceback.all);
  87 .:          end if;
  88 -:          Put_Line (File, "]]>");
  89 -:          Put_Line (File, "</error>");
  90 -:          Put_Line (File, "</testcase>");
  91 .:       else
  92 -:          Put_Line (File, """ />");
  93 .:       end if;      
  94 .:    end Report_Test;
  95 .:    
  96 .:    procedure Dump_Result_List (File : File_Type; L : Result_Lists.List) is
  97 .:       use Result_Lists;
  98 -:       C : Cursor := First (L);
  99 .:    begin
 100 -:       while Has_Element (C) loop
 101 -:          Report_Test (File, Element (C));
 102 -:          Next (C);
 103 .:       end loop;
 104 .:    end Dump_Result_List;
 105 .:    
 106 .:    procedure Report (Engine  : JUnit_Reporter;
 107 .:                      R       : in out Result'Class;
 108 .:                      Options : AUnit_Options := Default_Options)
 109 .:    is     
 110 -:       File : File_Type renames Engine.File.all;
 111 -:       T    : constant Time := Elapsed (R);
 112 .:    begin
 113 -:       Put_Line (File, "<?xml version=""1.0"" encoding=""utf-8""?>");
 114 -:       Put_Line (File, "<testsuites>");
 115 -:       Put (File, "<testsuite name=""" & "aunit_testsuite" & """ skipped=""0"" tests=""");
 116 -:       Put (File, Integer (Test_Count (R)), 0);
 117 -:       Put (File, """ failures=""");
 118 -:       Put (File, Integer (Failure_Count (R)), 0);
 119 -:       Put (File, """ errors=""");
 120 -:       Put (File, Integer (Error_Count (R)), 0);
 121 -:       if T /= Time_Measure.Null_Time then
 122 -:          Put (File, """ time=""");
 123 -:          Put_Measure (File, Get_Measure (T));
 124 .:       end if;
 125 -:       Put_Line (File, """>");      
 126 -:       if Options.Report_Successes then
 127 .:          declare
 128 -:             S : Result_Lists.List;
 129 .:          begin
 130 -:             Successes (R, S);
 131 -:             Dump_Result_List (File, S);
 132 .:          end;
 133 .:       end if;      
 134 .:       declare
 135 -:          F : Result_Lists.List;
 136 .:       begin
 137 -:          Failures (R, F);
 138 -:          Dump_Result_List (File, F);
 139 .:       end;
 140 .:       declare
 141 -:          E : Result_Lists.List;
 142 .:       begin
 143 -:          Errors (R, E);
 144 -:          Dump_Result_List (File, E);
 145 .:       end;      
 146 -:       Put_Line (File, "</testsuite>");
 147 -:       Put_Line (File, "</testsuites>");
 148 .:    end Report;
 149 .: 
 150 .: end AUnit.Reporter.JUnit;
